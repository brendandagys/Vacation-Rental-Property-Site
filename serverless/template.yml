AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template.

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  AuthorizationHashSalt:
    Type: String
    Default: 9281938493930257
    Description: Secret salt for hashing passwords
  CorsOrigin:
    Type: String
    Default: https://api.spainluxury.holiday
    Description: Origin allowed to interact with the API
  DynamoDbEndpoint:
    Type: String
    Default: http://docker.for.mac.localhost:8000
  JwtSecret:
    Type: String
    Default: myjwtsecret
  TableName:
    Type: String
    Default: business-site
    Description: Name of the DynamoDB table

Resources:
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI-PK
          AttributeType: S
        - AttributeName: GSI-SK
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: GSI-1
          KeySchema:
            - AttributeName: GSI-PK
              KeyType: HASH
            - AttributeName: GSI-SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref TableName
  # Table:
  #   Type: AWS::Serverless::SimpleTable # More info about SimpleTable Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
  #   Properties:
  #     PrimaryKey:
  #       Name: id
  #       Type: String

  AuthFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: rust-cargolambda # More info about Cargo Lambda: https://github.com/cargo-lambda/cargo-lambda
      BuildProperties:
        Binary: auth
    Properties:
      CodeUri: ./rust_app   # Points to dir of Cargo.toml
      Handler: bootstrap    # Do not change, as this is the default executable name produced by Cargo Lambda
      Runtime: provided.al2
      Architectures:
      - arm64
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth
            Method: POST
        CORS:
          Type: Api
          Properties:
            Path: /auth
            Method: OPTIONS
      Environment:
        Variables:
          AUTHORIZATION_HASH_SALT: !Ref AuthorizationHashSalt
          CORS_ORIGIN: !Ref CorsOrigin
          DYNAMODB_ENDPOINT: !Ref DynamoDbEndpoint
          JWT_SECRET: !Ref JwtSecret
          TABLE_NAME: !Ref TableName
      # Policies:
      # - DynamoDBWritePolicy:   # More info about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      #     TableName: !Ref Table
  
  GetItemsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: rust-cargolambda # More info about Cargo Lambda: https://github.com/cargo-lambda/cargo-lambda
      BuildProperties:
        Binary: fetch
    Properties:
      CodeUri: ./rust_app   # Points to dir of Cargo.toml
      Handler: bootstrap    # Do not change, as this is the default executable name produced by Cargo Lambda
      Runtime: provided.al2
      Architectures:
      - arm64
      Events:
        Fetch:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /fetch
            Method: GET
        CORS:
          Type: Api
          Properties:
            Path: /fetch
            Method: OPTIONS
      Environment:
        Variables:
          AUTHORIZATION_HASH_SALT: !Ref AuthorizationHashSalt
          CORS_ORIGIN: !Ref CorsOrigin
          DYNAMODB_ENDPOINT: !Ref DynamoDbEndpoint
          JWT_SECRET: !Ref JwtSecret
          TABLE_NAME: !Ref TableName
  
  PutFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: rust-cargolambda # More info about Cargo Lambda: https://github.com/cargo-lambda/cargo-lambda
      BuildProperties:
        Binary: put
    Properties:
      CodeUri: ./rust_app   # Points to directory of Cargo.toml
      Handler: bootstrap    # Do not change, as this is the default executable name produced by Cargo Lambda
      Runtime: provided.al2
      Architectures:
      - arm64
      Events:
        Put:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /put
            Method: PUT
        CORS:
          Type: Api
          Properties:
            Path: /put
            Method: OPTIONS
      Environment:
        Variables:
          AUTHORIZATION_HASH_SALT: !Ref AuthorizationHashSalt
          CORS_ORIGIN: !Ref CorsOrigin
          DYNAMODB_ENDPOINT: !Ref DynamoDbEndpoint
          JWT_SECRET: !Ref JwtSecret
          TABLE_NAME: !Ref TableName

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup
# Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # PutApi:
  #   Description: API Gateway endpoint URL for Prod stage for Put function
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod/"
  # PutFunction:
  #   Description: Put Lambda Function ARN
  #   Value: !GetAtt PutFunction.Arn
  # PutTable:
  #   Description: DynamoDB table name
  #   Value: !GetAtt Table.Arn
