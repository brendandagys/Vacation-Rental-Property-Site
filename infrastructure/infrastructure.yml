AWSTemplateFormatVersion: 2010-09-09

Conditions:
  CreateDeployBucketAndPolicy: !Equals [!Ref ExistingDeployBucket, '']
  # CreatePipelineBucket: !Equals [!Ref ExistingPipelineBucket, '']
  CreateLoggingBucket: !Equals [!Ref ExistingLoggingBucket, '']
  CreateDnsRecordWww: !Equals [!Ref DnsRecordWwwFlag, 'true']

Parameters:
  DnsRecordWwwFlag:
    Type: String
    Default: 'true'

  ExistingDeployBucket:
    Type: String
    Default: spain.brendandagys.com

  ExistingLoggingBucket:
    Type: String
    Default: arn:aws:s3:::708746137251-cloudfront-logs
    # Default: ''
  
  # ExistingPipelineBucket:
  #   Type: String
  #   Default: arn:aws:s3:::business-site-pipeline-artifacts

  Repository:
    Type: String
    Default: business-site
  Branch:
    Type: String
    Default: main
    Description: e.g. main or master

  Domain:
    Type: String
    Default: spain.brendandagys.com

  HostedZoneId:
    Description: Route 53 Hosted Zone ID
    Type: String
    Default: Z1048063LC3J2IKH5GGI

  CloudFrontHostedZoneId:
    Type: String
    Default: Z2FDTNDATAQYW2

  DistributionHomePage:
    Type: String
    Default: /index.html

Resources:
  DeployBucket:
    Type: AWS::S3::Bucket
    Condition: CreateDeployBucketAndPolicy
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref Domain
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: false
        RestrictPublicBuckets: true

  DeployBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateDeployBucketAndPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket:
        !If [
          CreateDeployBucketAndPolicy,
          !Ref DeployBucket,
          !Ref ExistingDeployBucket,
        ]
      PolicyDocument:
        Id: MySiteDeployBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !If [
                    CreateDeployBucketAndPolicy,
                    !Ref DeployBucket,
                    !Ref ExistingDeployBucket,
                  ]
                - /*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}'

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                Resource:
                  - !ImportValue PipelineBucket
                  # - !If [
                  #     CreatePipelineBucket,
                  #     !GetAtt PipelineBucket.Arn,
                  #     !Ref ExistingPipelineBucket,
                  #   ]
                  - !Join [
                      '',
                      [
                        # !If [
                        #   CreatePipelineBucket,
                        #   !GetAtt PipelineBucket.Arn,
                        #   !Ref ExistingPipelineBucket,
                        # ],
                        !ImportValue PipelineBucket,
                        '/*',
                      ],
                    ]
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - 'arn:aws:s3:::*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource:
                  - '*'

  CodeBuildFrontend:
    # DependsOn: CodeBuildRole
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-frontend
      ServiceRole:
        !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:4.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              INLINE_RUNTIME_CHUNK: "false"
          phases:
            install:
              commands:
                - cd frontend
                - npm install
            build:
              commands:
                - npm run build
                # - npm test
                # - echo $CODEBUILD_SRC_DIR
                - ls
            post_build:
              on-failure: ABORT #CONTINUE
              commands:
                - aws s3 cp --recursive --acl public-read ./build s3://${Domain}/
                - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://${Domain}/
                - aws cloudfront create-invalidation --distribution-id ${Distribution} --paths "/*"

          artifacts:
            files:
              - 'frontend/build/**/*'
  
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Sub ${AWS::StackName}-pipeline-artifacts
        Type: S3
      RoleArn:
        !ImportValue PipelineRole
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              OutputArtifacts:
                - Name: !Sub '${AWS::StackName}-code'
              Configuration:
                RepositoryName: !Ref Repository
                BranchName: !Ref Branch
        - Name: Approval
          Actions:
            - Name: CloudFormation Infrastructure Creation
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 1
            - Name: SPA Deployment to CloudFront and S3
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: SPA Deployment to S3
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: !Sub ${AWS::StackName}-code
              OutputArtifacts:
                - Name: !Sub ${AWS::StackName}-frontend-build
              Configuration:
                ProjectName: !Ref CodeBuildFrontend
        # - Name: Deploy
        #   Actions:
        #     - Name: Deploy CloudFormation changeset
        #       ActionTypeId: 
        #         Category: Deploy
        #         Owner: AWS
        #         Provider: CloudFormation
        #         Version: 1
        #       InputArtifacts:
        #         - Name: !Sub ${AWS::StackName}-code
        #       OutputArtifacts:
        #         - Name: !Sub ${AWS::StackName}-changeset
        #       Configuration:
        #         ActionMode: CREATE_UPDATE
        #         StackName: !Sub ${AWS::StackName}-infrastructure
        #         TemplatePath: !Sub ${AWS::StackName}-code::infrastructure/infrastructure.yml

  LoggingBucket:
    Type: AWS::S3::Bucket
    Condition: CreateLoggingBucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::AccountId}-cloudfront-logs'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref Domain
      DomainValidationOptions: 
        - DomainName: !Ref Domain
          HostedZoneId: !Ref HostedZoneId
        - DomainName: !Join ['', ['*.', !Ref Domain]]
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub S3 SPA for ${AWS::StackName}
        Aliases:
          - !Ref Domain
          - !If [
              CreateDnsRecordWww,
              !Join ['', ['www.', !Ref Domain]],
              !Ref AWS::NoValue,
            ]
        Origins:
          - Id:
              !If [
                CreateDeployBucketAndPolicy,
                !Ref DeployBucket,
                !Ref ExistingDeployBucket,
              ]
            DomainName: !Sub '${Domain}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
        ViewerCertificate:
          AcmCertificateArn:
            !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: !Ref DistributionHomePage
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: !Ref DistributionHomePage
            ErrorCachingMinTTL: 10
        DefaultRootObject: !Ref DistributionHomePage
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: false
        DefaultCacheBehavior:
          TargetOriginId:
            !If [
              CreateDeployBucketAndPolicy,
              !Ref DeployBucket,
              !Ref ExistingDeployBucket,
            ]
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          # FunctionAssociations:
          #   - EventType: viewer-request
          #     FunctionARN:
          #       !ImportValue {
          #         'Fn::Sub': '${MasterStackName}-cloudfront-function-canonical-url',
          #       }
          #   - EventType: viewer-response
          #     FunctionARN:
          #       !ImportValue {
          #         'Fn::Sub': '${MasterStackName}-cloudfront-function-security-headers',
          #       }
        Logging:
          Bucket:
            - !If [
              CreateLoggingBucket,
              !Sub '${AWS::AccountId}-cloudfront-logs.s3.amazonaws.com',
              !Ref ExistingLoggingBucket
            ]
          IncludeCookies: true
          Prefix: !Sub '${AWS::StackName}-logs'

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref Domain
      Type: A
      AliasTarget:
        HostedZoneId: !Ref CloudFrontHostedZoneId
        DNSName: !GetAtt Distribution.DomainName

  DnsRecordWww:
    Condition: CreateDnsRecordWww
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Join ['', ['www.', !Ref Domain]]
      Type: A
      AliasTarget:
        HostedZoneId: !Ref CloudFrontHostedZoneId
        DNSName: !GetAtt Distribution.DomainName
