AWSTemplateFormatVersion: 2010-09-09

Conditions:
  CreateAssetsBucketAndPolicy: !Equals [!Ref CreateAssetsBucketAndPolicy, 'true']
  CreateDeployBucketAndPolicy: !Equals [!Ref CreateDeployBucketAndPolicy, 'true']
  CreateDnsRecordWww: !Equals [!Ref DnsRecordWwwFlag, 'true']

Parameters:
  DnsRecordWwwFlag:
    Type: String
    Default: 'true'

  CreateAssetsBucketAndPolicy:
    Type: String
    Default: 'true'

  CreateDeployBucketAndPolicy:
    Type: String
    Default: 'true'

  Repository:
    Type: String
    Default: business-site

  Branch:
    Description: e.g. main or master
    Type: String
    Default: main

  Domain:
    Type: String
    Default: spainluxury.holiday

  HostedZoneId:
    Description: Route 53 Hosted Zone ID
    Type: String
    Default: Z00358393282BXBWKBN4

  CloudFrontHostedZoneId:
    Type: String
    Default: Z2FDTNDATAQYW2

  DistributionHomePage:
    Type: String
    Default: /index.html

Resources:
  AssetsBucket:
    Condition: CreateAssetsBucketAndPolicy
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${Domain}-assets
      # Do not set `OwnershipControls` - bucket creation will fail 
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  AssetsBucketPolicy:
    Condition: CreateAssetsBucketAndPolicy
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Sub ${Domain}-assets
      PolicyDocument:
        Id: !Sub ${AWS::StackName}-assets-bucket-policy
        Version: 2012-10-17
        Statement:
          - Sid: Policy-for-CloudFront-private-content
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${Domain}-assets/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}

  DeployBucket:
    Condition: CreateDeployBucketAndPolicy
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref Domain
      # OwnershipControls:
      #   Rules:
      #     - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  DeployBucketPolicy:
    Condition: CreateDeployBucketAndPolicy
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref Domain
      PolicyDocument:
        Id: !Sub ${AWS::StackName}-deploy-bucket-policy
        Version: 2012-10-17
        Statement:
          - Sid: Policy-for-CloudFront-private-content
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${Domain}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}
          - Sid: Policy-for-CodeBuild
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: !Sub arn:aws:s3:::${Domain}/*
          - Sid: Allow-CloudFormation-To-Update-Bucket-Policy
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - s3:PutBucketPolicy
              - s3:CreateBucket
            Resource: !Sub arn:aws:s3:::${Domain}
            

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                Resource:
                  - !ImportValue PipelineBucketArn
                  - !Sub ['${Arn}/*', Arn: !ImportValue PipelineBucketArn]
              - Effect: Allow
                Action:
                  - s3:GetBucketVersioning
                Resource: !Sub arn:aws:s3:::${Domain}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub arn:aws:s3:::${Domain}/*
              - Effect: Allow
                Action: [logs:CreateLogGroup, logs:CreateLogStream, logs:PutLogEvents]
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action: cloudfront:CreateInvalidation
                Resource: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}

  CodeBuildFrontend:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-frontend
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:4.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              INLINE_RUNTIME_CHUNK: "false"
          phases:
            install:
              commands:
                - cd frontend
                - npm install
            build:
              commands:
                - npm run build
                - ls
                # - echo $CODEBUILD_SRC_DIR && npm test
            post_build:
              on-failure: ABORT #CONTINUE
              commands:
                - aws s3 cp --recursive --acl public-read ./build s3://${Domain}/
                - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://${Domain}/
                - aws cloudfront create-invalidation --distribution-id ${Distribution} --paths "/*"

          artifacts:
            files: [frontend/build/**/*]
  
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      Policies:
        - PolicyName: pipeline-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:UploadArchive
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:GetBranch
                  - codecommit:CancelUploadArchive
                Resource: !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${Repository}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${AWS::AccountId}-pipeline-artifacts
                  - !Sub arn:aws:s3:::${AWS::AccountId}-pipeline-artifacts/*
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*

  
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Sub ${AWS::AccountId}-pipeline-artifacts
        Type: S3
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: !Sub ${Repository}@${Branch}
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              OutputArtifacts:
                - Name: !Sub ${AWS::StackName}-code
              Configuration:
                RepositoryName: !Ref Repository
                BranchName: !Ref Branch
        - Name: Approval
          Actions:
            - Name: Deploy-application-to-CloudFront-edge-locations
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
        - Name: Build
          Actions:
            - Name: SPA-build-and-deployment-to-CloudFront-OAC-S3
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: !Sub ${AWS::StackName}-code
              OutputArtifacts:
                - Name: !Sub ${AWS::StackName}-frontend-build
              Configuration:
                ProjectName: !Ref CodeBuildFrontend

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref Domain
      SubjectAlternativeNames:
        - !Sub www.${Domain}
        - !Sub api.${Domain}
      DomainValidationOptions:
        - DomainName: !Ref Domain
          HostedZoneId: !Ref HostedZoneId
        - DomainName: !Sub www.${Domain}
          HostedZoneId: !Ref HostedZoneId
        - DomainName: !Sub api.${Domain}
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontFunctionSecurityHeaders:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${AWS::StackName}-viewer-response
      FunctionConfig:
        Comment: Adds HTTP security headers to the viewer response
        Runtime: cloudfront-js-1.0
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
            var response = event.response;
            var headers = response.headers;

            // Set HTTP security headers
            headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'};
            headers['content-security-policy'] = {
              value: "default-src 'none'; img-src 'self' data:; script-src 'self'; object-src 'none'; connect-src 'self'; manifest-src 'self'; style-src 'self'; style-src-elem 'self' 'unsafe-inline'; font-src 'self'"
            };
            headers['x-content-type-options'] = { value: 'nosniff'};
            headers['x-frame-options'] = {value: 'DENY'};
            headers['x-xss-protection'] = {value: '1; mode=block'};

            delete headers['x-powered-by'];

            return response;
        }

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub S3 SPA and assets bucket for ${AWS::StackName}
        Aliases:
          - !Ref Domain
          - !If [CreateDnsRecordWww, !Sub 'www.${Domain}', !Ref AWS::NoValue]
        Origins:
          - Id: !Sub ${AWS::StackName}-spa
            DomainName: !Sub ${Domain}.s3.${AWS::Region}.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
          - Id: !Sub ${AWS::StackName}-spa-assets
            DomainName: !Sub ${Domain}-assets.s3.${AWS::Region}.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: !Ref DistributionHomePage
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: !Ref DistributionHomePage
            ErrorCachingMinTTL: 10
        DefaultRootObject: !Ref DistributionHomePage
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: false
        DefaultCacheBehavior:
          TargetOriginId: !Sub ${AWS::StackName}-spa
          Compress: true
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Caching Optimized
          FunctionAssociations:
            - EventType: viewer-response
              FunctionARN: !Ref CloudFrontFunctionSecurityHeaders
        CacheBehaviors:
          - TargetOriginId: !Sub ${AWS::StackName}-spa-assets
            Compress: true
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            PathPattern: images/*
        Logging:
          Bucket: !ImportValue LoggingBucketDomain
          IncludeCookies: true
          Prefix: !Sub ${AWS::StackName}-spa-distribution-logs

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref Domain
      Type: A
      AliasTarget:
        HostedZoneId: !Ref CloudFrontHostedZoneId
        DNSName: !GetAtt Distribution.DomainName

  DnsRecordWww:
    Condition: CreateDnsRecordWww
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub www.${Domain}
      Type: A
      AliasTarget:
        HostedZoneId: !Ref CloudFrontHostedZoneId
        DNSName: !GetAtt Distribution.DomainName

Outputs:
  CertificateArn:
    Value: !Ref Certificate
    Export:
      Name: !Sub ${AWS::StackName}-certificate-arn
